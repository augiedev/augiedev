<apex:page docType="html-5.0" standardStylesheets="false" showHeader="false" sidebar="false">
<head>
	<meta charset="UTF-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" /> 
	<title>Contacts in Backbone.js</title>

	<!-- ========= -->
	<!--	CSS	-->
	<!-- ========= -->
	<link href="{!URLFOR($Resource.MobileSample_Resources_Backbone, 'resources/css/jquery.mobile-1.3.0.min.css')}" rel="stylesheet" />

	<!-- ========= -->
	<!-- Libraries -->
	<!-- ========= -->
	<script src="{!URLFOR($Resource.MobileSample_Resources_Backbone, 'resources/lib/jquery-1.9.1.min.js')}" type="text/javascript"></script>
	<script src="{!URLFOR($Resource.MobileSample_Resources_Backbone, 'resources/lib/lodash.js')}" type="text/javascript"></script>
	<script src="{!URLFOR($Resource.MobileSample_Resources_Backbone, 'resources/lib/backbone.js')}" type="text/javascript"></script>
	<script src="{!URLFOR($Resource.MobileSample_Resources_Backbone, 'resources/lib/forcetk.js')}" type="text/javascript"></script>
	<script src="{!URLFOR($Resource.MobileSample_Resources_Backbone, 'resources/lib/backbone.force.js')}" type="text/javascript"></script>
	<script>
		$( document ).on( "mobileinit",
			// Set up the "mobileinit" handler before including jQuery Mobile
			function() {
				$.mobile.ajaxEnabled = false;
				$.mobile.linkBindingEnabled = false;
				// $.mobile.hashListeningEnabled = false;
				// $.mobile.pushStateEnabled = false;
				// $.mobile.changePage.defaults.changeHash = false;
			}
		)
	</script>
	<script src="{!URLFOR($Resource.MobileSample_Resources_Backbone, 'resources/lib/jquery.mobile-1.3.0.js')}" type="text/javascript"></script>
	
</head>
<body>

	<div id="search_container"></div>

	<!-- ========= -->
	<!-- Templates -->
	<!-- ========= -->
	<script type="text/template" id="search_template">
		<label><%= search_label %></label>
		<input type="text" id="search_input" />
		<input type="button" id="search_button" value="Search" />
	</script>

	<script type="text/javascript">
	
		<!-- ========= -->
		<!--  Models   -->
		<!-- ========= -->
		
		Song = Backbone.Model.extend({
			defaults : {
				name : 'not specified',
				artist : 'not specified'
			},
			initialise : function() {
			}
		});
		
		Person = Backbone.Model.extend({
			defaults : {
				name : 'Cletus',
				age : 0,
				child : ''
			},
			initialize : function() {
				console.log('Welcome to the world: ' + this.get('name'));
				this.on("change:name", function() {
					console.log('Name has been changed to: ' + this.get('name'));
				});
			},
			validate : function(attributes) {
				if (attributes.age < 0) {
					alert('ERROR: You have an age of less than 0');
				}
			},
			// the following is a function which sets the child attribute to the value of the childName parameter for the instance of the Person object
			adopt : function(childName) {
				this.set({child : childName});
			}
		});

		<!-- ======= -->
		<!--  Views  -->
		<!-- ======= -->
		SearchView = Backbone.View.extend({
			initialize : function() {
				this.render();
			},
			render : function() {
				// Pass variables in using Underscore.js Template
				var variables = { search_label: "My Search:" };
				
				// Compile the template using underscore
				var template = _.template($j("#search_template").html(), variables );
				
				// Load the compiled HTML into the Backbone "el"
				this.$el.html(template);
			},
			events : {
				// call the function doSearch whenever the button with the id search_button is clicked
				"click input[id=search_button]": "doSearch"
			},
			doSearch : function(event) {
				console.log("You searched for: " + $j("#search_input").val());
				console.log('Name: ' + person1.get("name"));
				console.log('Name: ' + person2.get("name"));
				console.log('Child of Person2: ' + person2.get("child"));
			}
		});

		<!-- =========== -->
		<!-- Collections -->
		<!-- =========== -->
		Album = Backbone.Collection.extend({
			model : Song
		});
		
		<!-- ========= -->
		<!--  Routers  -->
		<!-- ========= -->
		// matches http://example.com/#anything-here
		var AppRouter = Backbone.Router.extend({
			routes :  {
				"posts/:id" : "getPost",
				"*actions" : "defaultRoute"
			}
		});

		var search_view = new SearchView({ el: $j('#search_container') });
		var person1 = new Person();
		var person2 = new Person({name : "Warren", age : 35});
		var person3 = new Person({name : "Warren", age : 35});
		person2.adopt('Liam');
		person2.set({name : 'Warren Schembri'});
		person1.set({name : 'Homer Simpson'});
		person2.set({age : 34});
		person3.set({age : -1});
		
		var attributes = person1.toJSON();
		
		var song1 = new Song({name : 'Once', artist: 'Pearl Jam'});
		var song2 = new Song({name : 'Alive', artist: 'Pearl Jam'});
		var song3 = new Song({name : 'Even Flow', artist: 'Pearl Jam'});
		var song4 = new Song({name : 'Why Go', artist: 'Pearl Jam'});
		var song5 = new Song({name : 'Black', artist: 'Pearl Jam'});
		var song6 = new Song({name : 'Jeremy', artist: 'Pearl Jam'});
		var albumTen = new Album([song1, song2, song3, song4, song5, song6]);

		for (i = 0; i < albumTen.models.length; i++) {
			console.log(albumTen.models[i].get("name"));
		}

		// Initialize the router
		var appRouter = new AppRouter();
		appRouter.on('route:getPost', function(id) {
			alert("Get post id: " + id);
		});		
		appRouter.on('route:defaultRouter', function(actions) {
			alert(actions);
		});
		
		// Start Backbone history. A necessary step for bookmarkable urls
		Backbone.history.start(); 
		

	</script>
</body>
</apex:page>